from machine import Pin, ADC, mem32
from time import sleep

# Pines de los LEDs para los semÃ¡foros
luces_semaforos = [2, 4, 5, 14, 15, 16, 17, 18, 19, 22, 23, 26, 32, 33]
bandera = 0  # 0: SemÃ¡foro funcionando, 1: MediciÃ³n de temperatura

# Configurar los GPIOs de los semÃ¡foros como salidas con PULL-DOWN
for pin_num in luces_semaforos:
    Pin(pin_num, Pin.OUT, value=0)  # Se asegura que inicien apagados

# Configurar el pulsador para cambiar de modo (GPIO25)
def cambiar_modo(pin):
    global bandera
    bandera = 1 if bandera == 0 else 0  # Alterna entre 0 (semaforo) y 1 (temperatura)

pulsador_modo = Pin(25, Pin.IN, Pin.PULL_UP)
pulsador_modo.irq(trigger=Pin.IRQ_RISING, handler=cambiar_modo)

# Configurar el sensor de temperatura LM35
sensor_temperatura = ADC(Pin(39))  # Entrada analÃ³gica para el sensor
sensor_temperatura.atten(ADC.ATTN_11DB)  # AtenuaciÃ³n para rango completo (0-3.3V)
sensor_temperatura.width(ADC.WIDTH_10BIT)  # ResoluciÃ³n de 10 bits

GPIO_OUT_REG = 0x03FF44004  # DirecciÃ³n de los registros GPIO en el ESP32

# Ciclo principal
while True:
    
    while bandera == 0:  # Modo SemÃ¡foro
        
        print("SemÃ¡foro funcionando â˜‘")
        
        # ðŸš¦ Fase 1: Vehicular Calle en Verde, Carrera en Rojo, Extra en Rojo, Peatonal Carrera en Verde
        mem32[GPIO_OUT_REG] = 0b00000000010100000000000000010100
        sleep(3)

        # ðŸš¦ Fase 2: PrecauciÃ³n (Amarillo en Calle)
        mem32[GPIO_OUT_REG] = 0b00000000000100000000000000000100
        sleep(2)

        # ðŸš¦ Fase 3: Vehicular Calle en Rojo, Carrera en Verde, Extra en Verde, Peatonal Calle en Verde
        mem32[GPIO_OUT_REG] = 0b00000000000010101000000000000000
        sleep(3)

        # ðŸš¦ Fase 4: PrecauciÃ³n (Amarillo en Carrera)
        mem32[GPIO_OUT_REG] = 0b00000000000000101000000000000000
        sleep(2)

        # ðŸš¦ Fase 5: Peatonales en Verde, Vehiculares en Rojo
        mem32[GPIO_OUT_REG] = 0b00000000000000000010000000010000
        sleep(5)

        # ðŸš¦ Fase 6: Todo en Rojo antes de reiniciar el ciclo
        mem32[GPIO_OUT_REG] = 0b00000000000000000000000000000000
        sleep(2)

    while bandera == 1:  # Modo Temperatura
        
        print("Sensor de temperatura activado â˜‘")
        
        # Apagar todos los semÃ¡foros
        mem32[GPIO_OUT_REG] = 0b00000000000000000000000000000000
        
        # Leer el valor del sensor LM35
        valor_adc = sensor_temperatura.read()

        # ConversiÃ³n de la lectura ADC a temperatura en grados Celsius
        voltaje = (valor_adc / 1023.0) * 3.3  # Convertir lectura a voltaje (0-3.3V)
        temperatura = voltaje * 100  # LM35 tiene una relaciÃ³n de 10mV/Â°C

        print("Temperatura:", round(temperatura, 2), "Â°C")
        
        sleep(1)  # Espera para actualizar la lectura
